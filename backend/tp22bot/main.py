from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from sqlalchemy import create_engine, Column, Integer, String
from sqlalchemy.orm import sessionmaker, declarative_base

BOT_TOKEN = "7359766703:AAGoimEWuyA96OgmjHEqf_qvVUym6t0OchU"
DATABASE_URL = "sqlite:///users.db"
SITE_URL = "https://yourwebsite.com"

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True, index=True)
    telegram_id = Column(Integer, unique=True, index=True, nullable=False)
    name = Column(String, nullable=False)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(bind=engine)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
MAIN_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"],
        ["üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç"]
    ],
    resize_keyboard=True
)

# Inline-–∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∞–π—Ç–∞
INLINE_SITE_BUTTON = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url=SITE_URL)]]
)

def get_user_by_telegram_id(session, telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID."""
    return session.query(User).filter(User.telegram_id == telegram_id).first()

def create_user(session, telegram_id, name):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    new_user = User(telegram_id=telegram_id, name=name)
    session.add(new_user)
    session.commit()
    return new_user

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(telegram_id, name):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    with SessionLocal() as session:
        user = User(telegram_id=telegram_id, name=name)
        session.add(user)
        session.commit()
        return user

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def get_all_users():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    with SessionLocal() as session:
        return session.query(User).all()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    with SessionLocal() as session:
        db_user = get_user_by_telegram_id(session, user.id)
        if not db_user:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            name = user.first_name or user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
            create_user(session, user.id, name)
            await update.message.reply_text(
                f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.",
                reply_markup=MAIN_KEYBOARD
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            await update.message.reply_text(
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {db_user.name}!",
                reply_markup=MAIN_KEYBOARD
            )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = update.message.text

    with SessionLocal() as session:
        if text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
            about_text = "–ù–∞—à –ø—Ä–æ–µ–∫—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é –ø–∞–ø–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏!"
            await update.message.reply_text(about_text)
        elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            users = session.query(User).all()
            if not users:
                await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            else:
                user_list = "\n".join(
                    [f"- {user.name} (ID: {user.telegram_id})" for user in users]
                )
                await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
        elif text == "üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç":
            await update.message.reply_text(
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:",
                reply_markup=INLINE_SITE_BUTTON
            )
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
